1.Merge sorted array

package leetcode;

public class mergesort {
public static void main(String[] args) {
	int num1[]= {1,2,3,0,0,0};
	int num2[]= {2,5,6};
	int m = 3;
	int n = 3;
	merge(num1,m,num2,n);
	for(int i=0;i<num1.length;i++) {
		System.out.print(num1[i]+" ");
	}
}

private static void merge(int[] nums1, int m, int[] nums2, int n) {
	// TODO Auto-generated method stub
	 int p1 = m-1, p2 = n-1, i = m+n-1;
     while(p2 >= 0){
         if(p1 >= 0 && nums1[p1] > nums2[p2]){
             nums1[i--] = nums1[p1--];
         }
         else {
             nums1[i--] = nums2[p2--];
         }
     }
	
}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Kth Smallest Element in the Array

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int kthsmallest(final List<Integer> A, int B) {
        Collections.sort(A);
        return A.get(B-1);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Consecutive Array Elements

class Solution{
    public void quickSort(long arr[],int start,int end){
        if(start>end){
            return;
        }
        long pivot = arr[end];
        int pi = partition(arr,pivot,start,end);
        quickSort(arr,start,end-1);
        quickSort(arr,start+1,end);
    }
    
    public static int partition(long arr[],long pivot,int start,int end){
        
        int i=start;
        int j=start;
        
        while(i < arr.length){
            if(arr[i]<=pivot){
                swap(arr,i,j);
                i++;
                j++;
            }else{
                i++;
            }
        }
        return (j-1);
    }
    public static void swap(long arr[],int i,int j){
        long temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    boolean areConsecutives(long arr[], int N)
    {
      int start = 0;
      int end = N-1;
      quickSort(arr,start,end);
      
      for(int i=1;i<arr.length;i++){
          if(arr[i]!=arr[i-1]+1) return false;
      }
      return true;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.Chocolate Distribution Problem
class Solution
{
    public long findMinDiff (ArrayList<Integer> a, int n, int m)
    {
       Collections.sort(a);    
       long res = Long.MAX_VALUE;
       
       for(int i = 0;i+m-1<n;i++){
           res = Math.min(a.get(i+m-1)-a.get(i),res);
       }
       return res;
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
5. Sort an Array

package leetcode;

public class mergeSort2 {
public static void main(String[] args) {
	int arr[] = {5,14,2,3,1};
	int[] sortArray = sortArray(arr);
	for(int i = 0;i<sortArray.length;i++) {
		System.out.print(sortArray[i]+" ");
	}
}

private static int[] sortArray(int[] arr) {
	
	sort(arr,0,arr.length-1);
	return arr;
	
}

private static void sort(int[] nums, int low, int high) {
	 if(low<high){
         int mid = low + ((high - low) / 2 );
         
         sort(nums,low,mid);
         sort(nums,mid+1,high);
         
         merge(nums, low, mid, high);
     }
	
}

private static void merge(int[] nums, int low, int mid, int high) {
	  int n = mid-low+1, m = high - mid;
      int[] left = new int[n];
      int[] right = new int[m];
      
      int i =0,j=0;
      for(i=0;i<n;i++)
          left[i] = nums[low+i];
      
      for(i=0;i<m;i++)
          right[i] = nums[i+mid+1];
      
      i=0;
      j=0;
      int k = low;
      while(i<n && j<m){
          if(left[i]<right[j])
              nums[k++] = left[i++];
          else
              nums[k++] = right[j++];
      }
      
      while(i<n)
          nums[k++] = left[i++];
      
      while(j<m)
          nums[k++] = right[j++];
	
}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
6.Sort Colors

class Solution {
    public void swap(int i,int j,int[]nums){
        int temp=nums[i];
        nums[i]=nums[j];
        nums[j]=temp;
    }
    public void sortColors(int[] nums) {
        int i=0;
        int j=0;
        int k=nums.length-1;

        while(i<=k){
            if(nums[i]==0){
                swap(i,j,nums);
                i++;
                j++;
            }else if(nums[i]==1){
                i++;
            }else{
                swap(i,k,nums);
                k--;
            }
        }
    }
}
