1.Merge sorted array

package leetcode;

public class mergesort {
public static void main(String[] args) {
	int num1[]= {1,2,3,0,0,0};
	int num2[]= {2,5,6};
	int m = 3;
	int n = 3;
	merge(num1,m,num2,n);
	for(int i=0;i<num1.length;i++) {
		System.out.print(num1[i]+" ");
	}
}

private static void merge(int[] nums1, int m, int[] nums2, int n) {
	// TODO Auto-generated method stub
	 int p1 = m-1, p2 = n-1, i = m+n-1;
     while(p2 >= 0){
         if(p1 >= 0 && nums1[p1] > nums2[p2]){
             nums1[i--] = nums1[p1--];
         }
         else {
             nums1[i--] = nums2[p2--];
         }
     }
	
}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.Kth Smallest Element in the Array

public class Solution {
    // DO NOT MODIFY THE LIST. IT IS READ ONLY
    public int kthsmallest(final List<Integer> A, int B) {
        Collections.sort(A);
        return A.get(B-1);
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.Consecutive Array Elements

class Solution{
    public void quickSort(long arr[],int start,int end){
        if(start>end){
            return;
        }
        long pivot = arr[end];
        int pi = partition(arr,pivot,start,end);
        quickSort(arr,start,end-1);
        quickSort(arr,start+1,end);
    }
    
    public static int partition(long arr[],long pivot,int start,int end){
        
        int i=start;
        int j=start;
        
        while(i < arr.length){
            if(arr[i]<=pivot){
                swap(arr,i,j);
                i++;
                j++;
            }else{
                i++;
            }
        }
        return (j-1);
    }
    public static void swap(long arr[],int i,int j){
        long temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }
    boolean areConsecutives(long arr[], int N)
    {
      int start = 0;
      int end = N-1;
      quickSort(arr,start,end);
      
      for(int i=1;i<arr.length;i++){
          if(arr[i]!=arr[i-1]+1) return false;
      }
      return true;
    }
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
4.
